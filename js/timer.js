// Generated by CoffeeScript 1.3.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Timer = (function() {

    Timer.name = 'Timer';

    function Timer(time, on_update) {
      this.is_counting = __bind(this.is_counting, this);

      this.hour = __bind(this.hour, this);

      this.minute = __bind(this.minute, this);

      this.second = __bind(this.second, this);

      this.to_string = __bind(this.to_string, this);

      this.stop = __bind(this.stop, this);

      this.start = __bind(this.start, this);

      this.reset = __bind(this.reset, this);

      this.trigger = __bind(this.trigger, this);

      this.off = __bind(this.off, this);

      this.on = __bind(this.on, this);

      this._to_time_string = __bind(this._to_time_string, this);

      this._count_down = __bind(this._count_down, this);
      this.on('update', on_update);
      this.reset(time);
    }

    Timer.prototype._interval = 97;

    Timer.prototype._count_down = function() {
      this.time -= this._interval + 3;
      this.trigger('update');
      if (this.time <= 0) {
        return this.stop();
      }
    };

    Timer.prototype._to_time_string = function(i) {
      var s;
      s = i.toString();
      if (s.length === 1) {
        s = '0' + s;
      }
      return s;
    };

    Timer.prototype.on = function(events, handler) {
      $(this).on(events, handler);
      return this;
    };

    Timer.prototype.off = function() {
      $(this).off(events, handler);
      return this;
    };

    Timer.prototype.trigger = function(events) {
      $(this).trigger(events);
      return this;
    };

    Timer.prototype.reset = function(time) {
      if (this.id != null) {
        clearInterval(this.id);
      }
      if (time && typeof time === 'number') {
        this.init_time = this.time = time;
        return this.trigger('update');
      }
    };

    Timer.prototype.start = function() {
      console.log('start');
      if (this.time > 0) {
        return this.id = setInterval(this._count_down, this._interval);
      }
    };

    Timer.prototype.stop = function() {
      console.log('stop');
      if (this.id) {
        clearInterval(this.id);
        return this.id = void 0;
      }
    };

    Timer.prototype.to_string = function() {
      var h, time;
      h = this.hour();
      time = "" + (this.minute()) + ":" + (this.second());
      if (h) {
        time = ("" + h + ":") + time;
      }
      return time;
    };

    Timer.prototype.second = function() {
      return this._to_time_string(~~(this.time / 1000 % 60));
    };

    Timer.prototype.minute = function() {
      return this._to_time_string(~~((this.time / 1000 % 3600) / 60));
    };

    Timer.prototype.hour = function() {
      return ~~(this.time / 3600000);
    };

    Timer.prototype.is_counting = function() {
      return this.id != null;
    };

    return Timer;

  })();

}).call(this);
