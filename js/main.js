// Generated by CoffeeScript 1.3.1
(function() {
  var default_options_one, default_options_three, default_options_two, get_label_from, get_timer_from, init_view_one, init_view_three, init_view_two, on_change, on_next, on_previous, on_reset, on_toggle, on_toggle_one, on_toggle_three, on_toggle_two, on_update, return_on_show_one, return_on_show_three, return_on_show_two,
    _this = this;

  window.timers = {
    current_running: function() {
      var current;
      console.log('current running');
      if (window.timers.current == null) {
        return false;
      }
      current = window.timers.current;
      switch (current.type) {
        case '1':
          return current.$toggle.hasClass('active');
        case '2':
        case '3':
          return current[current.side].$toggle.hasClass('active');
      }
    },
    stop_current: function() {
      if (window.timers.current_running()) {
        return window.timers.toggle_current();
      }
    },
    start_current: function() {
      console.log('start current');
      if (!window.timers.current_running()) {
        return window.timers.toggle_current();
      }
    },
    toggle_current: function() {
      var current;
      console.log('toggle current');
      current = window.timers.current;
      switch (current.type) {
        case '1':
          return current.$toggle.click();
        case '2':
        case '3':
          return current[current.side].$toggle.click();
      }
    },
    save_current: function(timer, type, first_side) {
      var current;
      console.log('save current');
      current = window.timers.current = timer;
      current.type = type;
      return current.side = first_side;
    },
    _side_matrix: {
      'pos': 'con',
      'con': 'pos'
    },
    other_side: function() {
      if (window.timers.type === '1') {
        return false;
      }
      return window.timers.current[window.timers._side_matrix[window.timers.current.side]];
    },
    change_side: function() {
      var current, single;
      console.log('change side');
      current = window.timers.current;
      single = window.timers.current["single_" + current.side];
      console.log('single', single);
      single.reset(single.init_time);
      return current.side = window.timers._side_matrix[current.side];
    }
  };

  get_label_from = function($btn) {
    return $btn.closest('.tab-pane').get(0).id;
  };

  get_timer_from = function($btn) {
    var label;
    label = get_label_from($btn);
    return window.timers[label];
  };

  on_reset = function(e) {
    var $target, timer;
    e.preventDefault();
    $target = $(e.target);
    if (!confirm('确定要重置时间么？')) {
      return;
    }
    window.timers.stop_current();
    timer = get_timer_from($target);
    switch (window.timers.current.type) {
      case '1':
        timer.reset(timer.init_time);
        return timer.$toggle.removeClass('disabled');
      case '2':
        timer.pos.reset(timer.pos.init_time);
        timer.con.reset(timer.con.init_time);
        timer.single_pos.reset(timer.single_pos.init_time);
        timer.single_con.reset(timer.single_con.init_time);
        timer.pos.$toggle.removeClass('disabled');
        return timer.con.$toggle.removeClass('disabled');
      case '3':
        timer.pos.reset(timer.pos.init_time);
        timer.con.reset(timer.con.init_time);
        timer.pos.$toggle.removeClass('disabled');
        return timer.con.$toggle.removeClass('disabled');
    }
  };

  on_toggle = function(e) {
    switch (timers.current.type) {
      case '1':
        return on_toggle_one(e);
      case '2':
        return on_toggle_two(e);
      case '3':
        return on_toggle_three(e);
    }
  };

  on_toggle_one = function(e) {
    var $target, timer;
    e.preventDefault();
    $target = $(e.target);
    if ($target.hasClass('disabled')) {
      return;
    }
    timer = get_timer_from($target);
    if ($target.hasClass('active')) {
      timer.stop();
      $target.html('<i class="icon-play"></i> 开始');
    } else {
      timer.start();
      $target.html('<i class="icon-pause"></i> 暂停');
    }
    return $target.toggleClass('active');
  };

  on_toggle_two = function(e) {
    var $target, side, single, timer;
    e.preventDefault();
    $target = $(e.target);
    if ($target.hasClass('disabled')) {
      return;
    }
    timer = get_timer_from($target);
    side = timers.current.side;
    single = "single_" + side;
    if ($target.hasClass('active')) {
      timer[side].stop();
      timer[single].stop();
      $target.html('<i class="icon-play"></i> 开始');
    } else {
      timer[side].start();
      timer[single].start();
      $target.html('<i class="icon-pause"></i> 暂停');
    }
    return $target.toggleClass('active');
  };

  on_toggle_three = function(e) {
    var $target, side, timer;
    e.preventDefault();
    $target = $(e.target);
    if ($target.hasClass('disabled')) {
      return;
    }
    timer = get_timer_from($target);
    side = timers.current.side;
    if ($target.hasClass('active')) {
      timer[side].stop();
      $target.html('<i class="icon-play"></i> 开始');
    } else {
      timer[side].start();
      $target.html('<i class="icon-pause"></i> 暂停');
    }
    return $target.toggleClass('active');
  };

  on_next = function(e) {
    var $next, $target, label, selector;
    console.log('on next');
    e.preventDefault();
    $target = $(e.target);
    label = get_label_from($target);
    selector = "ul.nav.nav-tabs li a[href=#" + label + "]";
    $next = $(selector).parent().nextAll('[class!=nav-header]').first().find('a');
    if ($next.length) {
      return $next.click();
    }
  };

  on_previous = function(e) {
    var $previous, $target, label, selector;
    console.log('on previous');
    e.preventDefault();
    $target = $(e.target);
    label = get_label_from($target);
    selector = "ul.nav.nav-tabs li a[href=#" + label + "]";
    $previous = $(selector).parent().prevAll('[class!=nav-header]').first().find('a');
    if ($previous.length) {
      return $previous.click();
    }
  };

  on_update = function(e) {
    var color, other_side, _ref, _ref1, _ref2;
    if ((_ref = this.$el) != null) {
      _ref.html(this.to_string());
    }
    if (this.time === 0) {
      switch (window.timers.current.type) {
        case '1':
          this.$toggle.click().addClass('disabled');
          break;
        case '2':
        case '3':
          other_side = window.timers.other_side();
          if (other_side.time === 0) {
            this.$toggle.click().addClass('disabled');
          } else {
            window.timers.stop_current();
            window.timers.change_side();
            window.timers.start_current();
          }
      }
    } else if (this.time < 25600) {
      color = '#' + (~~((25600 - this.time) / 100)).toString(16) + '0000';
      if ((_ref1 = this.$el) != null) {
        _ref1.css('color', color);
      }
    } else {
      if ((_ref2 = this.$el) != null) {
        _ref2.css('color', '#000');
      }
    }
    return this.$progress.width("" + ((1 - this.time / this.init_time) * 100) + "%");
  };

  on_change = function(e) {
    timers.stop_current();
    timers.change_side();
    return timers.start_current();
  };

  return_on_show_one = function(init_time, label) {
    return function(e) {
      var timer;
      console.log('on show one', 'timers.current', timers.current, init_time, label);
      timers.stop_current();
      if (timers[label] == null) {
        timers[label] = new Timer(init_time);
      }
      timer = timers[label];
      timers.save_current(timer, '1');
      _(timer).extend({
        label: label,
        $el: $("#" + label + " .timer"),
        $progress: $("#" + label + " .progress .bar"),
        $toggle: $("#" + label + " .btn.toggle")
      });
      return timer.on('update', on_update).trigger('update');
    };
  };

  return_on_show_two = function(init_time_pos, init_time_con, label, first_side, single_time_pos, single_time_con) {
    return function(e) {
      var timer;
      console.log('on show two', 'timers.current', timers.current, init_time_pos, init_time_con, label);
      timers.stop_current();
      if (timers[label] == null) {
        timers[label] = {
          pos: new Timer(init_time_pos),
          con: new Timer(init_time_con),
          single_pos: new Timer(single_time_pos),
          single_con: new Timer(single_time_con)
        };
      }
      timer = timers[label];
      timers.save_current(timer, '2', first_side);
      _(timer.pos).extend({
        label: label,
        $el: $("#" + label + " .timer.pos"),
        $progress: $("#" + label + " .main .progress.pos .bar"),
        $toggle: $("#" + label + " .btn.toggle"),
        $change: $("#" + label + " .btn.change")
      });
      _(timer.con).extend({
        label: label,
        $el: $("#" + label + " .timer.con"),
        $progress: $("#" + label + " .main .progress.con .bar"),
        $toggle: $("#" + label + " .btn.toggle"),
        $change: $("#" + label + " .btn.change")
      });
      _(timer.single_pos).extend({
        label: label,
        $progress: $("#" + label + " .single .progress.pos .bar"),
        $toggle: $("#" + label + " .btn.toggle"),
        $change: $("#" + label + " .btn.change"),
        single: true
      });
      _(timer.single_con).extend({
        label: label,
        $progress: $("#" + label + " .single .progress.con .bar"),
        $toggle: $("#" + label + " .btn.toggle"),
        $change: $("#" + label + " .btn.change"),
        single: true
      });
      timer.pos.on('update', on_update).trigger('update');
      timer.con.on('update', on_update).trigger('update');
      timer.single_pos.on('update', on_update).trigger('update');
      return timer.single_con.on('update', on_update).trigger('update');
    };
  };

  return_on_show_three = function(init_time_pos, init_time_con, label, first_side) {
    return function(e) {
      var timer;
      console.log('on show three', 'timers.current', timers.current, init_time_pos, init_time_con, label, first_side);
      timers.stop_current();
      if (timers[label] == null) {
        timers[label] = {
          pos: new Timer(init_time_pos),
          con: new Timer(init_time_con)
        };
      }
      timer = timers[label];
      timers.save_current(timer, '3', first_side);
      _(timer.pos).extend({
        label: label,
        $el: $("#" + label + " .timer.pos"),
        $progress: $("#" + label + " .progress.pos .bar"),
        $toggle: $("#" + label + " .btn.toggle"),
        $change: $("#" + label + " .btn.change")
      });
      _(timer.con).extend({
        label: label,
        $el: $("#" + label + " .timer.con"),
        $progress: $("#" + label + " .progress.con .bar"),
        $toggle: $("#" + label + " .btn.toggle"),
        $change: $("#" + label + " .btn.change")
      });
      timer.pos.on('update', on_update).trigger('update');
      return timer.con.on('update', on_update).trigger('update');
    };
  };

  default_options_one = {
    $container: $('.main-pane'),
    previous: true,
    next: true
  };

  init_view_one = function(options) {
    var template;
    if (options == null) {
      options = default_options_one;
    }
    options = _.extend(_.clone(default_options_one), options);
    if (!((options.label != null) && (options.title != null))) {
      return false;
    }
    template = _.template($('#tab-pane-type-one').html());
    options.$container.append(template(options));
    return $("a[href=#" + options.label + "]").on('show', return_on_show_one(options.init_time, options.label));
  };

  default_options_two = {
    $container: $('.main-pane'),
    previous: true,
    next: true
  };

  init_view_two = function(options) {
    var template;
    if (options == null) {
      options = default_options_two;
    }
    options = _.extend(_.clone(default_options_two), options);
    if (!((options.label != null) && (options.title != null))) {
      return false;
    }
    template = _.template($('#tab-pane-type-two').html());
    options.$container.append(template(options));
    return $("a[href=#" + options.label + "]").on('show', return_on_show_two(options.init_time_pos, options.init_time_con, options.label, options.first_side, options.single_time_pos, options.single_time_con));
  };

  default_options_three = {
    $container: $('.main-pane'),
    previous: true,
    next: true
  };

  init_view_three = function(options) {
    var template;
    if (options == null) {
      options = default_options_three;
    }
    options = _.extend(_.clone(default_options_three), options);
    if (!((options.label != null) && (options.title != null) && (options.first_side != null))) {
      return false;
    }
    template = _.template($('#tab-pane-type-three').html());
    options.$container.append(template(options));
    return $("a[href=#" + options.label + "]").on('show', return_on_show_three(options.init_time_pos, options.init_time_con, options.label, options.first_side));
  };

  $(function() {
    $('body').on('click', '.btn.toggle', on_toggle).on('click', '.btn.reset', on_reset).on('click', '.btn.next', on_next).on('click', '.btn.previous', on_previous).on('click', '.btn.change', on_change);
    init_view_one({
      title: '正方一辩破题立论',
      label: 'pos-1-1',
      previous: false,
      init_time: 3 * 60 * 1000
    });
    init_view_one({
      title: '反方二辩盘问正方一辩',
      label: 'con-1-2',
      init_time: 2 * 60 * 1000
    });
    init_view_one({
      title: '反方一辩破题立论',
      label: 'con-1-1',
      init_time: 3 * 60 * 1000
    });
    init_view_one({
      title: '正方二辩盘问反方一辩',
      label: 'pos-1-2',
      init_time: 2 * 60 * 1000
    });
    init_view_two({
      title: '正方三辩攻辩反方一、二、四辩',
      label: 'pos-2-1',
      init_time_pos: 60 * 1000,
      single_time_pos: 20 * 1000,
      init_time_con: 1.5 * 60 * 1000,
      single_time_con: 30 * 1000,
      first_side: 'pos'
    });
    init_view_two({
      title: '反方三辩攻辩正方一、二、四辩',
      label: 'con-2-1',
      init_time_con: 60 * 1000,
      single_time_con: 20 * 1000,
      init_time_pos: 1.5 * 60 * 1000,
      single_time_pos: 30 * 1000,
      first_side: 'con'
    });
    init_view_one({
      title: '正方三辩攻辩小结',
      label: 'pos-2-2',
      init_time: 1.5 * 60 * 1000
    });
    init_view_one({
      title: '反方三辩攻辩小结',
      label: 'con-2-2',
      init_time: 1.5 * 60 * 1000
    });
    init_view_three({
      title: '自由辩论',
      label: '3',
      init_time_pos: 5 * 60 * 1000,
      init_time_con: 5 * 60 * 1000,
      first_side: 'pos'
    });
    init_view_one({
      title: '正方四辩总结陈词',
      label: 'pos-4',
      init_time: 4 * 60 * 1000
    });
    init_view_one({
      title: '反方四辩总结陈词',
      label: 'con-4',
      init_time: 4 * 60 * 1000,
      next: false
    });
    return $('a[href=#pos-1-1]').click();
  });

}).call(this);
